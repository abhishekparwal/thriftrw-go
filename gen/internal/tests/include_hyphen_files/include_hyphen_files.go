// Code generated by thriftrw v1.20.1-dev. DO NOT EDIT.
// @generated

package include_hyphen_files

import (
	fmt "fmt"
	multierr "go.uber.org/multierr"
	abc_defs "go.uber.org/thriftrw/gen/internal/tests/abc_defs"
	thriftreflect "go.uber.org/thriftrw/thriftreflect"
	wire "go.uber.org/thriftrw/wire"
	zapcore "go.uber.org/zap/zapcore"
	strings "strings"
)

type DocumentUnion struct {
	Value *abc_defs.DocumentStruct `json:"value,omitempty"`
}

// ToWire translates a DocumentUnion struct into a Thrift-level intermediate
// representation. This intermediate representation may be serialized
// into bytes using a ThriftRW protocol implementation.
//
// An error is returned if the struct or any of its fields failed to
// validate.
//
//   x, err := v.ToWire()
//   if err != nil {
//     return err
//   }
//
//   if err := binaryProtocol.Encode(x, writer); err != nil {
//     return err
//   }
func (v *DocumentUnion) ToWire() (wire.Value, error) {
	var (
		fields [1]wire.Field
		i      int = 0
		w      wire.Value
		err    error
	)

	if v.Value != nil {
		w, err = v.Value.ToWire()
		if err != nil {
			return w, err
		}
		fields[i] = wire.Field{ID: 1, Value: w}
		i++
	}

	if i != 1 {
		return wire.Value{}, fmt.Errorf("DocumentUnion should have exactly one field: got %v fields", i)
	}

	return wire.NewValueStruct(wire.Struct{Fields: fields[:i]}), nil
}

func _DocumentStruct_Read(w wire.Value) (*abc_defs.DocumentStruct, error) {
	var v abc_defs.DocumentStruct
	err := v.FromWire(w)
	return &v, err
}

// FromWire deserializes a DocumentUnion struct from its Thrift-level
// representation. The Thrift-level representation may be obtained
// from a ThriftRW protocol implementation.
//
// An error is returned if we were unable to build a DocumentUnion struct
// from the provided intermediate representation.
//
//   x, err := binaryProtocol.Decode(reader, wire.TStruct)
//   if err != nil {
//     return nil, err
//   }
//
//   var v DocumentUnion
//   if err := v.FromWire(x); err != nil {
//     return nil, err
//   }
//   return &v, nil
func (v *DocumentUnion) FromWire(w wire.Value) error {
	var err error

	for _, field := range w.GetStruct().Fields {
		switch field.ID {
		case 1:
			if field.Value.Type() == wire.TStruct {
				v.Value, err = _DocumentStruct_Read(field.Value)
				if err != nil {
					return err
				}

			}
		}
	}

	count := 0
	if v.Value != nil {
		count++
	}
	if count != 1 {
		return fmt.Errorf("DocumentUnion should have exactly one field: got %v fields", count)
	}

	return nil
}

// String returns a readable string representation of a DocumentUnion
// struct.
func (v *DocumentUnion) String() string {
	if v == nil {
		return "<nil>"
	}

	var fields [1]string
	i := 0
	if v.Value != nil {
		fields[i] = fmt.Sprintf("Value: %v", v.Value)
		i++
	}

	return fmt.Sprintf("DocumentUnion{%v}", strings.Join(fields[:i], ", "))
}

// Equals returns true if all the fields of this DocumentUnion match the
// provided DocumentUnion.
//
// This function performs a deep comparison.
func (v *DocumentUnion) Equals(rhs *DocumentUnion) bool {
	if v == nil {
		return rhs == nil
	} else if rhs == nil {
		return false
	}
	if !((v.Value == nil && rhs.Value == nil) || (v.Value != nil && rhs.Value != nil && v.Value.Equals(rhs.Value))) {
		return false
	}

	return true
}

// MarshalLogObject implements zapcore.ObjectMarshaler, enabling
// fast logging of DocumentUnion.
func (v *DocumentUnion) MarshalLogObject(enc zapcore.ObjectEncoder) (err error) {
	if v == nil {
		return nil
	}
	if v.Value != nil {
		err = multierr.Append(err, enc.AddObject("value", v.Value))
	}
	return err
}

// GetValue returns the value of Value if it is set or its
// zero value if it is unset.
func (v *DocumentUnion) GetValue() (o *abc_defs.DocumentStruct) {
	if v != nil && v.Value != nil {
		return v.Value
	}

	return
}

// IsSetValue returns true if Value is not nil.
func (v *DocumentUnion) IsSetValue() bool {
	return v != nil && v.Value != nil
}

// ThriftModule represents the IDL file used to generate this package.
var ThriftModule = &thriftreflect.ThriftModule{
	Name:     "include_hyphen_files",
	Package:  "go.uber.org/thriftrw/gen/internal/tests/include_hyphen_files",
	FilePath: "include_hyphen_files.thrift",
	SHA1:     "e29518c667ff5ca3d9c55b1f438312b6368c58ef",
	Includes: []*thriftreflect.ThriftModule{
		abc_defs.ThriftModule,
	},
	Raw: rawIDL,
}

const rawIDL = "include x \"./abc-defs.thrift\"\n\nunion DocumentUnion {\n    1: x.DocumentStruct value\n}\n"
